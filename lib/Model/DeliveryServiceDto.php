<?php
/**
 * DeliveryServiceDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  robsonek\phpAllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace robsonek\phpAllegroApi\Model;

use \ArrayAccess;
use \robsonek\phpAllegroApi\ObjectSerializer;

/**
 * DeliveryServiceDto Class Doc Comment
 *
 * @category Class
 * @description Primary object for Ship with Allegro. It&#39;s strongly related to delivery-method selected by buyer in purchase process and represent how shipment will be delivered. Delivery services contains set of features like cash on delivery support, insurance, additional services used to shipment creation.
 * @package  robsonek\phpAllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeliveryServiceDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryServiceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\robsonek\phpAllegroApi\Model\DeliveryServiceIdDto',
        'name' => 'string',
        'carrier_id' => 'string',
        'additional_services' => '\robsonek\phpAllegroApi\Model\AdditionalServiceDto[]',
        'additional_properties' => '\robsonek\phpAllegroApi\Model\AdditionalPropertyDto[]',
        'owner' => 'string',
        'marketplaces' => 'string[]',
        'package_types' => 'string[]',
        'cash_on_delivery' => '\robsonek\phpAllegroApi\Model\CashOnDeliveryLimitDto',
        'insurance' => '\robsonek\phpAllegroApi\Model\LimitWithCurrencyDto',
        'features' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'carrier_id' => null,
        'additional_services' => null,
        'additional_properties' => null,
        'owner' => null,
        'marketplaces' => null,
        'package_types' => null,
        'cash_on_delivery' => null,
        'insurance' => null,
        'features' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'carrier_id' => false,
        'additional_services' => false,
        'additional_properties' => false,
        'owner' => false,
        'marketplaces' => false,
        'package_types' => false,
        'cash_on_delivery' => false,
        'insurance' => false,
        'features' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'carrier_id' => 'carrierId',
        'additional_services' => 'additionalServices',
        'additional_properties' => 'additionalProperties',
        'owner' => 'owner',
        'marketplaces' => 'marketplaces',
        'package_types' => 'packageTypes',
        'cash_on_delivery' => 'cashOnDelivery',
        'insurance' => 'insurance',
        'features' => 'features'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'carrier_id' => 'setCarrierId',
        'additional_services' => 'setAdditionalServices',
        'additional_properties' => 'setAdditionalProperties',
        'owner' => 'setOwner',
        'marketplaces' => 'setMarketplaces',
        'package_types' => 'setPackageTypes',
        'cash_on_delivery' => 'setCashOnDelivery',
        'insurance' => 'setInsurance',
        'features' => 'setFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'carrier_id' => 'getCarrierId',
        'additional_services' => 'getAdditionalServices',
        'additional_properties' => 'getAdditionalProperties',
        'owner' => 'getOwner',
        'marketplaces' => 'getMarketplaces',
        'package_types' => 'getPackageTypes',
        'cash_on_delivery' => 'getCashOnDelivery',
        'insurance' => 'getInsurance',
        'features' => 'getFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OWNER_ALLEGRO = 'ALLEGRO';
    public const OWNER_CLIENT = 'CLIENT';
    public const PACKAGE_TYPES_DOX = 'DOX';
    public const PACKAGE_TYPES_PACKAGE = 'PACKAGE';
    public const PACKAGE_TYPES_PALLET = 'PALLET';
    public const PACKAGE_TYPES_OTHER = 'OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnerAllowableValues()
    {
        return [
            self::OWNER_ALLEGRO,
            self::OWNER_CLIENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageTypesAllowableValues()
    {
        return [
            self::PACKAGE_TYPES_DOX,
            self::PACKAGE_TYPES_PACKAGE,
            self::PACKAGE_TYPES_PALLET,
            self::PACKAGE_TYPES_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('additional_services', $data ?? [], null);
        $this->setIfExists('additional_properties', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('marketplaces', $data ?? [], null);
        $this->setIfExists('package_types', $data ?? [], null);
        $this->setIfExists('cash_on_delivery', $data ?? [], null);
        $this->setIfExists('insurance', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOwnerAllowableValues();
        if (!is_null($this->container['owner']) && !in_array($this->container['owner'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'owner', must be one of '%s'",
                $this->container['owner'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \robsonek\phpAllegroApi\Model\DeliveryServiceIdDto|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \robsonek\phpAllegroApi\Model\DeliveryServiceIdDto|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of delivery service. <br/> For Allegro Standard method, name of service will be exactly same and occurs only once: eg. 'Allegro Courier DPD'. <br/> For merchant's controlled method, name is concatenation of method name and credential name: eg. 'Courier DPD (My agreement)'.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string|null $carrier_id carrier_id
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            throw new \InvalidArgumentException('non-nullable carrier_id cannot be null');
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets additional_services
     *
     * @return \robsonek\phpAllegroApi\Model\AdditionalServiceDto[]|null
     */
    public function getAdditionalServices()
    {
        return $this->container['additional_services'];
    }

    /**
     * Sets additional_services
     *
     * @param \robsonek\phpAllegroApi\Model\AdditionalServiceDto[]|null $additional_services additional_services
     *
     * @return self
     */
    public function setAdditionalServices($additional_services)
    {
        if (is_null($additional_services)) {
            throw new \InvalidArgumentException('non-nullable additional_services cannot be null');
        }
        $this->container['additional_services'] = $additional_services;

        return $this;
    }

    /**
     * Gets additional_properties
     *
     * @return \robsonek\phpAllegroApi\Model\AdditionalPropertyDto[]|null
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     *
     * @param \robsonek\phpAllegroApi\Model\AdditionalPropertyDto[]|null $additional_properties additional_properties
     *
     * @return self
     */
    public function setAdditionalProperties($additional_properties)
    {
        if (is_null($additional_properties)) {
            throw new \InvalidArgumentException('non-nullable additional_properties cannot be null');
        }
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Define delivery method type. ALLEGRO - Allegro Standard. Client - Merchant carrier agreement
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $allowedValues = $this->getOwnerAllowableValues();
        if (!in_array($owner, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'owner', must be one of '%s'",
                    $owner,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets marketplaces
     *
     * @return string[]|null
     */
    public function getMarketplaces()
    {
        return $this->container['marketplaces'];
    }

    /**
     * Sets marketplaces
     *
     * @param string[]|null $marketplaces List of marketplaces supported by service
     *
     * @return self
     */
    public function setMarketplaces($marketplaces)
    {
        if (is_null($marketplaces)) {
            throw new \InvalidArgumentException('non-nullable marketplaces cannot be null');
        }
        $this->container['marketplaces'] = $marketplaces;

        return $this;
    }

    /**
     * Gets package_types
     *
     * @return string[]|null
     */
    public function getPackageTypes()
    {
        return $this->container['package_types'];
    }

    /**
     * Sets package_types
     *
     * @param string[]|null $package_types List of supported package types
     *
     * @return self
     */
    public function setPackageTypes($package_types)
    {
        if (is_null($package_types)) {
            throw new \InvalidArgumentException('non-nullable package_types cannot be null');
        }
        $allowedValues = $this->getPackageTypesAllowableValues();
        if (array_diff($package_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'package_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['package_types'] = $package_types;

        return $this;
    }

    /**
     * Gets cash_on_delivery
     *
     * @return \robsonek\phpAllegroApi\Model\CashOnDeliveryLimitDto|null
     */
    public function getCashOnDelivery()
    {
        return $this->container['cash_on_delivery'];
    }

    /**
     * Sets cash_on_delivery
     *
     * @param \robsonek\phpAllegroApi\Model\CashOnDeliveryLimitDto|null $cash_on_delivery cash_on_delivery
     *
     * @return self
     */
    public function setCashOnDelivery($cash_on_delivery)
    {
        if (is_null($cash_on_delivery)) {
            throw new \InvalidArgumentException('non-nullable cash_on_delivery cannot be null');
        }
        $this->container['cash_on_delivery'] = $cash_on_delivery;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return \robsonek\phpAllegroApi\Model\LimitWithCurrencyDto|null
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param \robsonek\phpAllegroApi\Model\LimitWithCurrencyDto|null $insurance insurance
     *
     * @return self
     */
    public function setInsurance($insurance)
    {
        if (is_null($insurance)) {
            throw new \InvalidArgumentException('non-nullable insurance cannot be null');
        }
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets features
     *
     * @return array<string,string>|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param array<string,string>|null $features A map of service-specific features. List of key will be builded per services.
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


