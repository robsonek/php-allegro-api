<?php
/**
 * ModificationDelivery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  robsonek\phpAllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace robsonek\phpAllegroApi\Model;

use \ArrayAccess;
use \robsonek\phpAllegroApi\ObjectSerializer;

/**
 * ModificationDelivery Class Doc Comment
 *
 * @category Class
 * @description Contains delivery details to change.
 * @package  robsonek\phpAllegroApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModificationDelivery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ModificationDelivery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipping_rates' => '\robsonek\phpAllegroApi\Model\ShippingRates',
        'handling_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipping_rates' => null,
        'handling_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipping_rates' => false,
        'handling_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_rates' => 'shippingRates',
        'handling_time' => 'handlingTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_rates' => 'setShippingRates',
        'handling_time' => 'setHandlingTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_rates' => 'getShippingRates',
        'handling_time' => 'getHandlingTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HANDLING_TIME_PT0_S = 'PT0S';
    public const HANDLING_TIME_PT24_H = 'PT24H';
    public const HANDLING_TIME_PT48_H = 'PT48H';
    public const HANDLING_TIME_PT72_H = 'PT72H';
    public const HANDLING_TIME_PT96_H = 'PT96H';
    public const HANDLING_TIME_PT120_H = 'PT120H';
    public const HANDLING_TIME_PT168_H = 'PT168H';
    public const HANDLING_TIME_PT240_H = 'PT240H';
    public const HANDLING_TIME_PT336_H = 'PT336H';
    public const HANDLING_TIME_PT504_H = 'PT504H';
    public const HANDLING_TIME_PT720_H = 'PT720H';
    public const HANDLING_TIME_PT1440_H = 'PT1440H';
    public const HANDLING_TIME_P2_D = 'P2D';
    public const HANDLING_TIME_P3_D = 'P3D';
    public const HANDLING_TIME_P4_D = 'P4D';
    public const HANDLING_TIME_P5_D = 'P5D';
    public const HANDLING_TIME_P7_D = 'P7D';
    public const HANDLING_TIME_P10_D = 'P10D';
    public const HANDLING_TIME_P14_D = 'P14D';
    public const HANDLING_TIME_P21_D = 'P21D';
    public const HANDLING_TIME_P30_D = 'P30D';
    public const HANDLING_TIME_P60_D = 'P60D';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHandlingTimeAllowableValues()
    {
        return [
            self::HANDLING_TIME_PT0_S,
            self::HANDLING_TIME_PT24_H,
            self::HANDLING_TIME_PT48_H,
            self::HANDLING_TIME_PT72_H,
            self::HANDLING_TIME_PT96_H,
            self::HANDLING_TIME_PT120_H,
            self::HANDLING_TIME_PT168_H,
            self::HANDLING_TIME_PT240_H,
            self::HANDLING_TIME_PT336_H,
            self::HANDLING_TIME_PT504_H,
            self::HANDLING_TIME_PT720_H,
            self::HANDLING_TIME_PT1440_H,
            self::HANDLING_TIME_P2_D,
            self::HANDLING_TIME_P3_D,
            self::HANDLING_TIME_P4_D,
            self::HANDLING_TIME_P5_D,
            self::HANDLING_TIME_P7_D,
            self::HANDLING_TIME_P10_D,
            self::HANDLING_TIME_P14_D,
            self::HANDLING_TIME_P21_D,
            self::HANDLING_TIME_P30_D,
            self::HANDLING_TIME_P60_D,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipping_rates', $data ?? [], null);
        $this->setIfExists('handling_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHandlingTimeAllowableValues();
        if (!is_null($this->container['handling_time']) && !in_array($this->container['handling_time'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'handling_time', must be one of '%s'",
                $this->container['handling_time'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_rates
     *
     * @return \robsonek\phpAllegroApi\Model\ShippingRates|null
     */
    public function getShippingRates()
    {
        return $this->container['shipping_rates'];
    }

    /**
     * Sets shipping_rates
     *
     * @param \robsonek\phpAllegroApi\Model\ShippingRates|null $shipping_rates shipping_rates
     *
     * @return self
     */
    public function setShippingRates($shipping_rates)
    {
        if (is_null($shipping_rates)) {
            throw new \InvalidArgumentException('non-nullable shipping_rates cannot be null');
        }
        $this->container['shipping_rates'] = $shipping_rates;

        return $this;
    }

    /**
     * Gets handling_time
     *
     * @return string|null
     */
    public function getHandlingTime()
    {
        return $this->container['handling_time'];
    }

    /**
     * Sets handling_time
     *
     * @param string|null $handling_time Handling time, ISO 8601 duration format. PT0S for immediately.
     *
     * @return self
     */
    public function setHandlingTime($handling_time)
    {
        if (is_null($handling_time)) {
            throw new \InvalidArgumentException('non-nullable handling_time cannot be null');
        }
        $allowedValues = $this->getHandlingTimeAllowableValues();
        if (!in_array($handling_time, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'handling_time', must be one of '%s'",
                    $handling_time,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['handling_time'] = $handling_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


