<?php
/**
 * AlleDiscountApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Allegro REST API
 *
 * https://developer.allegro.pl/about  Documentation is generated from [this OpenAPI 3.0 specification file](https://developer.allegro.pl/swagger.yaml). To start working with our API, you can also check our [official Allegro REST API public collection](https://www.postman.com/allegro-rest-api/allegro-rest-api/collection/4puh6ls/allegro-rest-api) in Postman.
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AlleDiscountApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AlleDiscountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAlleDiscountCampaigns' => [
            'application/json',
        ],
        'getOffersEligibleForAlleDiscount' => [
            'application/json',
        ],
        'getOffersSubmittedToAlleDiscount' => [
            'application/json',
        ],
        'getSubmitOfferToAlleDiscountCommandsStatus' => [
            'application/json',
        ],
        'getWithdrawOfferFromAlleDiscountCommandsStatus' => [
            'application/json',
        ],
        'submitOfferToAlleDiscountCommands' => [
            'application/vnd.allegro.public.v1+json',
        ],
        'withdrawOfferFromAlleDiscountCommands' => [
            'application/vnd.allegro.public.v1+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAlleDiscountCampaigns
     *
     * List AlleDiscount campaigns
     *
     * @param  string $campaign_id Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleDiscountCampaigns'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountListCampaignsResponse|\OpenAPI\Client\Model\ErrorsHolder|\OpenAPI\Client\Model\ErrorsHolder
     */
    public function getAlleDiscountCampaigns($campaign_id = null, string $contentType = self::contentTypes['getAlleDiscountCampaigns'][0])
    {
        list($response) = $this->getAlleDiscountCampaignsWithHttpInfo($campaign_id, $contentType);
        return $response;
    }

    /**
     * Operation getAlleDiscountCampaignsWithHttpInfo
     *
     * List AlleDiscount campaigns
     *
     * @param  string $campaign_id Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleDiscountCampaigns'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountListCampaignsResponse|\OpenAPI\Client\Model\ErrorsHolder|\OpenAPI\Client\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAlleDiscountCampaignsWithHttpInfo($campaign_id = null, string $contentType = self::contentTypes['getAlleDiscountCampaigns'][0])
    {
        $request = $this->getAlleDiscountCampaignsRequest($campaign_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AlleDiscountListCampaignsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountListCampaignsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountListCampaignsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorsHolder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorsHolder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountListCampaignsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountListCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAlleDiscountCampaignsAsync
     *
     * List AlleDiscount campaigns
     *
     * @param  string $campaign_id Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleDiscountCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAlleDiscountCampaignsAsync($campaign_id = null, string $contentType = self::contentTypes['getAlleDiscountCampaigns'][0])
    {
        return $this->getAlleDiscountCampaignsAsyncWithHttpInfo($campaign_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAlleDiscountCampaignsAsyncWithHttpInfo
     *
     * List AlleDiscount campaigns
     *
     * @param  string $campaign_id Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleDiscountCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAlleDiscountCampaignsAsyncWithHttpInfo($campaign_id = null, string $contentType = self::contentTypes['getAlleDiscountCampaigns'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountListCampaignsResponse';
        $request = $this->getAlleDiscountCampaignsRequest($campaign_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAlleDiscountCampaigns'
     *
     * @param  string $campaign_id Id of the searched campaign. If present, returns at most one entry. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlleDiscountCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAlleDiscountCampaignsRequest($campaign_id = null, string $contentType = self::contentTypes['getAlleDiscountCampaigns'][0])
    {



        $resourcePath = '/sale/alle-discount/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $campaign_id,
            'campaignId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOffersEligibleForAlleDiscount
     *
     * List eligible offers
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  bool $meets_conditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersEligibleForAlleDiscount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountListEligibleResponse|\OpenAPI\Client\Model\ErrorsHolder
     */
    public function getOffersEligibleForAlleDiscount($campaign_id, $limit = null, $offset = null, $meets_conditions = null, $offer_id = null, string $contentType = self::contentTypes['getOffersEligibleForAlleDiscount'][0])
    {
        list($response) = $this->getOffersEligibleForAlleDiscountWithHttpInfo($campaign_id, $limit, $offset, $meets_conditions, $offer_id, $contentType);
        return $response;
    }

    /**
     * Operation getOffersEligibleForAlleDiscountWithHttpInfo
     *
     * List eligible offers
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  bool $meets_conditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersEligibleForAlleDiscount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountListEligibleResponse|\OpenAPI\Client\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOffersEligibleForAlleDiscountWithHttpInfo($campaign_id, $limit = null, $offset = null, $meets_conditions = null, $offer_id = null, string $contentType = self::contentTypes['getOffersEligibleForAlleDiscount'][0])
    {
        $request = $this->getOffersEligibleForAlleDiscountRequest($campaign_id, $limit, $offset, $meets_conditions, $offer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AlleDiscountListEligibleResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountListEligibleResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountListEligibleResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorsHolder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountListEligibleResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountListEligibleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOffersEligibleForAlleDiscountAsync
     *
     * List eligible offers
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  bool $meets_conditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersEligibleForAlleDiscount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOffersEligibleForAlleDiscountAsync($campaign_id, $limit = null, $offset = null, $meets_conditions = null, $offer_id = null, string $contentType = self::contentTypes['getOffersEligibleForAlleDiscount'][0])
    {
        return $this->getOffersEligibleForAlleDiscountAsyncWithHttpInfo($campaign_id, $limit, $offset, $meets_conditions, $offer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOffersEligibleForAlleDiscountAsyncWithHttpInfo
     *
     * List eligible offers
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  bool $meets_conditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersEligibleForAlleDiscount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOffersEligibleForAlleDiscountAsyncWithHttpInfo($campaign_id, $limit = null, $offset = null, $meets_conditions = null, $offer_id = null, string $contentType = self::contentTypes['getOffersEligibleForAlleDiscount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountListEligibleResponse';
        $request = $this->getOffersEligibleForAlleDiscountRequest($campaign_id, $limit, $offset, $meets_conditions, $offer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOffersEligibleForAlleDiscount'
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  bool $meets_conditions If true, filters offers that only meet conditions of the campaign. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the eligibleOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersEligibleForAlleDiscount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOffersEligibleForAlleDiscountRequest($campaign_id, $limit = null, $offset = null, $meets_conditions = null, $offer_id = null, string $contentType = self::contentTypes['getOffersEligibleForAlleDiscount'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getOffersEligibleForAlleDiscount'
            );
        }






        $resourcePath = '/sale/alle-discount/{campaignId}/eligible-offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meets_conditions,
            'meetsConditions', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offer_id,
            'offerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOffersSubmittedToAlleDiscount
     *
     * List offer participations
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param  string $participation_id Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersSubmittedToAlleDiscount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountListSubmittedResponse|\OpenAPI\Client\Model\ErrorsHolder
     */
    public function getOffersSubmittedToAlleDiscount($campaign_id, $limit = null, $offset = null, $offer_id = null, $participation_id = null, string $contentType = self::contentTypes['getOffersSubmittedToAlleDiscount'][0])
    {
        list($response) = $this->getOffersSubmittedToAlleDiscountWithHttpInfo($campaign_id, $limit, $offset, $offer_id, $participation_id, $contentType);
        return $response;
    }

    /**
     * Operation getOffersSubmittedToAlleDiscountWithHttpInfo
     *
     * List offer participations
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param  string $participation_id Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersSubmittedToAlleDiscount'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountListSubmittedResponse|\OpenAPI\Client\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOffersSubmittedToAlleDiscountWithHttpInfo($campaign_id, $limit = null, $offset = null, $offer_id = null, $participation_id = null, string $contentType = self::contentTypes['getOffersSubmittedToAlleDiscount'][0])
    {
        $request = $this->getOffersSubmittedToAlleDiscountRequest($campaign_id, $limit, $offset, $offer_id, $participation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AlleDiscountListSubmittedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountListSubmittedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountListSubmittedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorsHolder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountListSubmittedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountListSubmittedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOffersSubmittedToAlleDiscountAsync
     *
     * List offer participations
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param  string $participation_id Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersSubmittedToAlleDiscount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOffersSubmittedToAlleDiscountAsync($campaign_id, $limit = null, $offset = null, $offer_id = null, $participation_id = null, string $contentType = self::contentTypes['getOffersSubmittedToAlleDiscount'][0])
    {
        return $this->getOffersSubmittedToAlleDiscountAsyncWithHttpInfo($campaign_id, $limit, $offset, $offer_id, $participation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOffersSubmittedToAlleDiscountAsyncWithHttpInfo
     *
     * List offer participations
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param  string $participation_id Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersSubmittedToAlleDiscount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOffersSubmittedToAlleDiscountAsyncWithHttpInfo($campaign_id, $limit = null, $offset = null, $offer_id = null, $participation_id = null, string $contentType = self::contentTypes['getOffersSubmittedToAlleDiscount'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountListSubmittedResponse';
        $request = $this->getOffersSubmittedToAlleDiscountRequest($campaign_id, $limit, $offset, $offer_id, $participation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOffersSubmittedToAlleDiscount'
     *
     * @param  string $campaign_id Campaign id to list offers from. (required)
     * @param  int $limit Maximum number of offers returned in the eligibleOffers list; max value is 200. (optional)
     * @param  int $offset The number of offers to skip while listing the results. (optional)
     * @param  string $offer_id ID of an offer; if the offer with the given ID exists, returns at most one element in the submittedOffers list. (optional)
     * @param  string $participation_id Id of the participation, returns at most one element in the submittedOffers list. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOffersSubmittedToAlleDiscount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOffersSubmittedToAlleDiscountRequest($campaign_id, $limit = null, $offset = null, $offer_id = null, $participation_id = null, string $contentType = self::contentTypes['getOffersSubmittedToAlleDiscount'][0])
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getOffersSubmittedToAlleDiscount'
            );
        }






        $resourcePath = '/sale/alle-discount/{campaignId}/submitted-offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offer_id,
            'offerId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $participation_id,
            'participationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubmitOfferToAlleDiscountCommandsStatus
     *
     * Get the offer submission command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse
     */
    public function getSubmitOfferToAlleDiscountCommandsStatus($command_id, string $contentType = self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'][0])
    {
        list($response) = $this->getSubmitOfferToAlleDiscountCommandsStatusWithHttpInfo($command_id, $contentType);
        return $response;
    }

    /**
     * Operation getSubmitOfferToAlleDiscountCommandsStatusWithHttpInfo
     *
     * Get the offer submission command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubmitOfferToAlleDiscountCommandsStatusWithHttpInfo($command_id, string $contentType = self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'][0])
    {
        $request = $this->getSubmitOfferToAlleDiscountCommandsStatusRequest($command_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubmitOfferToAlleDiscountCommandsStatusAsync
     *
     * Get the offer submission command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubmitOfferToAlleDiscountCommandsStatusAsync($command_id, string $contentType = self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'][0])
    {
        return $this->getSubmitOfferToAlleDiscountCommandsStatusAsyncWithHttpInfo($command_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubmitOfferToAlleDiscountCommandsStatusAsyncWithHttpInfo
     *
     * Get the offer submission command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubmitOfferToAlleDiscountCommandsStatusAsyncWithHttpInfo($command_id, string $contentType = self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountGetSubmitCommandResponse';
        $request = $this->getSubmitOfferToAlleDiscountCommandsStatusRequest($command_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubmitOfferToAlleDiscountCommandsStatus'
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSubmitOfferToAlleDiscountCommandsStatusRequest($command_id, string $contentType = self::contentTypes['getSubmitOfferToAlleDiscountCommandsStatus'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getSubmitOfferToAlleDiscountCommandsStatus'
            );
        }


        $resourcePath = '/sale/alle-discount/submit-offer-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWithdrawOfferFromAlleDiscountCommandsStatus
     *
     * Get the offer withdrawal command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse
     */
    public function getWithdrawOfferFromAlleDiscountCommandsStatus($command_id, string $contentType = self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'][0])
    {
        list($response) = $this->getWithdrawOfferFromAlleDiscountCommandsStatusWithHttpInfo($command_id, $contentType);
        return $response;
    }

    /**
     * Operation getWithdrawOfferFromAlleDiscountCommandsStatusWithHttpInfo
     *
     * Get the offer withdrawal command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWithdrawOfferFromAlleDiscountCommandsStatusWithHttpInfo($command_id, string $contentType = self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'][0])
    {
        $request = $this->getWithdrawOfferFromAlleDiscountCommandsStatusRequest($command_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWithdrawOfferFromAlleDiscountCommandsStatusAsync
     *
     * Get the offer withdrawal command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWithdrawOfferFromAlleDiscountCommandsStatusAsync($command_id, string $contentType = self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'][0])
    {
        return $this->getWithdrawOfferFromAlleDiscountCommandsStatusAsyncWithHttpInfo($command_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWithdrawOfferFromAlleDiscountCommandsStatusAsyncWithHttpInfo
     *
     * Get the offer withdrawal command status
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWithdrawOfferFromAlleDiscountCommandsStatusAsyncWithHttpInfo($command_id, string $contentType = self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountGetWithdrawCommandResponse';
        $request = $this->getWithdrawOfferFromAlleDiscountCommandsStatusRequest($command_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWithdrawOfferFromAlleDiscountCommandsStatus'
     *
     * @param  string $command_id Command id in UUID format, must be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWithdrawOfferFromAlleDiscountCommandsStatusRequest($command_id, string $contentType = self::contentTypes['getWithdrawOfferFromAlleDiscountCommandsStatus'][0])
    {

        // verify the required parameter 'command_id' is set
        if ($command_id === null || (is_array($command_id) && count($command_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $command_id when calling getWithdrawOfferFromAlleDiscountCommandsStatus'
            );
        }


        $resourcePath = '/sale/alle-discount/withdraw-offer-commands/{commandId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($command_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commandId' . '}',
                ObjectSerializer::toPathValue($command_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitOfferToAlleDiscountCommands
     *
     * Create submit offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountSubmitCommandRequest $alle_discount_submit_command_request alle_discount_submit_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitOfferToAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse|\OpenAPI\Client\Model\ErrorsHolder
     */
    public function submitOfferToAlleDiscountCommands($alle_discount_submit_command_request, string $contentType = self::contentTypes['submitOfferToAlleDiscountCommands'][0])
    {
        list($response) = $this->submitOfferToAlleDiscountCommandsWithHttpInfo($alle_discount_submit_command_request, $contentType);
        return $response;
    }

    /**
     * Operation submitOfferToAlleDiscountCommandsWithHttpInfo
     *
     * Create submit offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountSubmitCommandRequest $alle_discount_submit_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitOfferToAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse|\OpenAPI\Client\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitOfferToAlleDiscountCommandsWithHttpInfo($alle_discount_submit_command_request, string $contentType = self::contentTypes['submitOfferToAlleDiscountCommands'][0])
    {
        $request = $this->submitOfferToAlleDiscountCommandsRequest($alle_discount_submit_command_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorsHolder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitOfferToAlleDiscountCommandsAsync
     *
     * Create submit offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountSubmitCommandRequest $alle_discount_submit_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitOfferToAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitOfferToAlleDiscountCommandsAsync($alle_discount_submit_command_request, string $contentType = self::contentTypes['submitOfferToAlleDiscountCommands'][0])
    {
        return $this->submitOfferToAlleDiscountCommandsAsyncWithHttpInfo($alle_discount_submit_command_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitOfferToAlleDiscountCommandsAsyncWithHttpInfo
     *
     * Create submit offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountSubmitCommandRequest $alle_discount_submit_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitOfferToAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitOfferToAlleDiscountCommandsAsyncWithHttpInfo($alle_discount_submit_command_request, string $contentType = self::contentTypes['submitOfferToAlleDiscountCommands'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountSubmitCommandResponse';
        $request = $this->submitOfferToAlleDiscountCommandsRequest($alle_discount_submit_command_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitOfferToAlleDiscountCommands'
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountSubmitCommandRequest $alle_discount_submit_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitOfferToAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitOfferToAlleDiscountCommandsRequest($alle_discount_submit_command_request, string $contentType = self::contentTypes['submitOfferToAlleDiscountCommands'][0])
    {

        // verify the required parameter 'alle_discount_submit_command_request' is set
        if ($alle_discount_submit_command_request === null || (is_array($alle_discount_submit_command_request) && count($alle_discount_submit_command_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alle_discount_submit_command_request when calling submitOfferToAlleDiscountCommands'
            );
        }


        $resourcePath = '/sale/alle-discount/submit-offer-commands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alle_discount_submit_command_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alle_discount_submit_command_request));
            } else {
                $httpBody = $alle_discount_submit_command_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation withdrawOfferFromAlleDiscountCommands
     *
     * Create withdraw offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountWithdrawCommandRequest $alle_discount_withdraw_command_request alle_discount_withdraw_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdrawOfferFromAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse|\OpenAPI\Client\Model\ErrorsHolder
     */
    public function withdrawOfferFromAlleDiscountCommands($alle_discount_withdraw_command_request, string $contentType = self::contentTypes['withdrawOfferFromAlleDiscountCommands'][0])
    {
        list($response) = $this->withdrawOfferFromAlleDiscountCommandsWithHttpInfo($alle_discount_withdraw_command_request, $contentType);
        return $response;
    }

    /**
     * Operation withdrawOfferFromAlleDiscountCommandsWithHttpInfo
     *
     * Create withdraw offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountWithdrawCommandRequest $alle_discount_withdraw_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdrawOfferFromAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse|\OpenAPI\Client\Model\ErrorsHolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function withdrawOfferFromAlleDiscountCommandsWithHttpInfo($alle_discount_withdraw_command_request, string $contentType = self::contentTypes['withdrawOfferFromAlleDiscountCommands'][0])
    {
        $request = $this->withdrawOfferFromAlleDiscountCommandsRequest($alle_discount_withdraw_command_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorsHolder' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorsHolder' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorsHolder', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorsHolder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation withdrawOfferFromAlleDiscountCommandsAsync
     *
     * Create withdraw offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountWithdrawCommandRequest $alle_discount_withdraw_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdrawOfferFromAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function withdrawOfferFromAlleDiscountCommandsAsync($alle_discount_withdraw_command_request, string $contentType = self::contentTypes['withdrawOfferFromAlleDiscountCommands'][0])
    {
        return $this->withdrawOfferFromAlleDiscountCommandsAsyncWithHttpInfo($alle_discount_withdraw_command_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation withdrawOfferFromAlleDiscountCommandsAsyncWithHttpInfo
     *
     * Create withdraw offer command
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountWithdrawCommandRequest $alle_discount_withdraw_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdrawOfferFromAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function withdrawOfferFromAlleDiscountCommandsAsyncWithHttpInfo($alle_discount_withdraw_command_request, string $contentType = self::contentTypes['withdrawOfferFromAlleDiscountCommands'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AlleDiscountWithdrawCommandResponse';
        $request = $this->withdrawOfferFromAlleDiscountCommandsRequest($alle_discount_withdraw_command_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'withdrawOfferFromAlleDiscountCommands'
     *
     * @param  \OpenAPI\Client\Model\AlleDiscountWithdrawCommandRequest $alle_discount_withdraw_command_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdrawOfferFromAlleDiscountCommands'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function withdrawOfferFromAlleDiscountCommandsRequest($alle_discount_withdraw_command_request, string $contentType = self::contentTypes['withdrawOfferFromAlleDiscountCommands'][0])
    {

        // verify the required parameter 'alle_discount_withdraw_command_request' is set
        if ($alle_discount_withdraw_command_request === null || (is_array($alle_discount_withdraw_command_request) && count($alle_discount_withdraw_command_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alle_discount_withdraw_command_request when calling withdrawOfferFromAlleDiscountCommands'
            );
        }


        $resourcePath = '/sale/alle-discount/withdraw-offer-commands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.allegro.public.v1+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alle_discount_withdraw_command_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alle_discount_withdraw_command_request));
            } else {
                $httpBody = $alle_discount_withdraw_command_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
